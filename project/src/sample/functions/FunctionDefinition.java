package sample.functions;

import java.util.ArrayList;

public class FunctionDefinition {

    private String name;
    private String description;
    private int[] input;
    private Boolean hasGraph;
    private String id;
    private int[] result;

    public String[] getLabel() { return label; }

    private String[] label;

    static ArrayList<FunctionDefinition> funcDef = new ArrayList<FunctionDefinition>();

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public int[] getNInput() {
        return input;
    }

    public boolean isHasGraph() {
        return hasGraph;
    }

    public String getId() {
        return id;
    }

    protected void setResult(int[] _result) {
        result = _result;
    }

    public FunctionDefinition(String id, String name, String description, int[] input, String[] label, Boolean hasGraph){
        this.id = id;
        this.name = name;
        this.description = description;
        this.input = input;
        this.hasGraph = hasGraph;
        this.label = label;
    }

    public static String getFunctionNameFromId(String id){
        String result = "";
            for(FunctionDefinition element : funcDef) {
                if(element.getId().equals(id)) {
                    result =  element.getName();
                }
            }
        return result;
    }

    public static FunctionDefinition findFunction(String idFunction){
        for(FunctionDefinition element : funcDef) {
            if(element.getId().equals(idFunction)) {
                return element;
            }
        }
        return null;
    }

    //definizione delle funzioni
    static FunctionDefinition fx_1 = new FunctionDefinition(
            "fx_func_1",
            "Sieve of Eratosthenes",
            "Compute all the prime numbers smaller or equal than the input",
            new int[]{1},
            new String[]{"n"},
            false
    );
    static FunctionDefinition fx_2 = new FunctionDefinition(
            "fx_func_2",
            "Greatest common divisor",
            "Compute the GCD of two inputs using the Euclid algorithm",
            new int[]{0,0},
            new String[]{"n", "m"},
            false
    );
    static FunctionDefinition fx_3 = new FunctionDefinition(
            "fx_func_3",
            "Number of primes",
            "Compute the number of prime numbers smaller or equal than the input",
            new int[]{0},
            new String[]{"n"},
            true
    );
    static FunctionDefinition fx_4 = new FunctionDefinition(
            "fx_func_4",
            "Euler's totient function",
            "Compute the number of positive integers that are co-prime with n.",
            new int[]{0},
            new String[]{"n"},
            true
    );
    static FunctionDefinition fx_5 = new FunctionDefinition(
            "fx_func_5",
            "Prime factorization",
            "Compute the prime factorization of the input.",
            new int[]{1},
            new String[]{"n"},
            false
    );
    static FunctionDefinition fx_6 = new FunctionDefinition(
            "fx_func_6",
            "Sigma function",
            "Compute the sums of the x-th powers of the positive divisors of n (including 1 and n itself)",
            new int[]{1,-1},
            new String[]{"n", "x"},
            false
    );
    static FunctionDefinition fx_7 = new FunctionDefinition(
            "fx_func_7",
            "Linear congruential generator",
            "Compute the first n random numbers (x1, …, xn), generated by the “linear congruential generator”",
            new int[]{0,0,-2, 0},
            new String[]{"a", "b", "m", "n"},
            false
    );
    static FunctionDefinition fx_8 = new FunctionDefinition(
            "fx_func_8",
            "Partition function",
            "Compute the number of possible partition of the input \nA partition is a way of representing an integer as a sum of positive integers" ,
            new int[]{-1},
            new String[]{"n"},
            true
    );

    public static void createList(){
        //creating array
        funcDef.add(fx_1);
        funcDef.add(fx_2);
        funcDef.add(fx_3);
        funcDef.add(fx_4);
        funcDef.add(fx_5);
        funcDef.add(fx_6);
        funcDef.add(fx_7);
        funcDef.add(fx_8);
    }

    public static ArrayList<FunctionDefinition> getFunctionList(){
        return funcDef;
    }

}
